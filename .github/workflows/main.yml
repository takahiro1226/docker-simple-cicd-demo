name: Deploy Simple CI/CD 

#mainのブランチにpushしたときに実行
on:
  push:
    branches: ["main"]

#環境変数を設定
#ECS_TASK_DEFINITIONはtask-definition.jsonのパスを指定
#デプロイの度task-definition.jsonの設定を読み込む
env:
  AWS_REGION: ap-northeast-1
  ECS_SERVICE: simple-cicd-service
  ECS_CLUSTER: simple-cicd-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json

#リポジトリのコンテンツに対して読み取り専用のアクセス権限を付与
permissions:
  contents: read

#実際に実行される処理
jobs:
# Web Container Build/Test
## Get Source
  #githubのページで表示されるジョブの名前
  web-test-build-image:
    name: Web Container - Test and Build
    #jobsを実行する環境
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    #jobsが実行されるディレクトリ
    defaults:
      run:
        working-directory: web
    #実行されるステップ  
    steps:
      #テンプレートのワークフローを実行。実行したリポジトリに切り替える
      - uses: actions/checkout@v3
    
    ## Build/Test
    ## Docker Image Build
    #docker image buildで本番環境用のイメージをビルド
    #targetを設定しているのはマルチステージビルドを行っているため
    #　.があるのはビルドコンテキストとして、webディレクトリを指定している カレントディレクトリになる
      - name: Build an Image and Run Tests
        run: |
          docker image build --target production -t temp_web_image_name:latest --build-arg REACT_APP_API_SERVER=/api .
    
    ## Login AWS
    #GitHub Actions ワークフロー内で AWS の認証情報を設定するための公式アクション
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
    
      ## Push image to ECR
      #Amazon ECR（Elastic Container Registry）への認証
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push the image to Amazon ECR
        env:
          #前のステップで取得したECRレジストリのURL
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          #GitHubのSecretsに保存されたリポジトリ名
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_WEB_SERVER_REPOSITORY }}
        run: |
          docker image tag temp_web_image_name:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

# API Container Build/Test
## Get Source
  api-test-build-image:
    name: API Container - Test and Build
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    defaults:
      run:
        working-directory: api
    ## Build/Test
    ## Docker Image Build  
    steps:
      - uses: actions/checkout@v3

      - name: Build an Image and Run Tests
        run: |
          docker image build --target production -t temp_api_image_name:latest .
      
      ## Login AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
 
      ## Push image to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_API_SERVER_REPOSITORY }}
        run: 
          docker image tag temp_api_image_name:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

# Deploy job階層
  ## Get Source
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04 
    #この2つのジョブが終わっている必要がある
    needs: [web-test-build-image, api-test-build-image]
   
    ## Login AWS
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
     
      ## Edit Task Definition タスク定義更新
      ## webコンテナのタスク定義を更新
      - name: Fill in the new image ID in the Amazon ECS task definition for web
        id: render-web-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: web
          #ここでタスク定義を更新している task-definition.jsonのimageを更新している
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_WEB_SERVER_REPOSITORY }} 

      ## apiコンテナのタスク定義を更新
      - name: Fill in the new image ID in the Amazon ECS task definition for api
        id: render-api-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-task-def.outputs.task-definition }}
          container-name: api
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_API_SERVER_REPOSITORY }}
      ## Deploy
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

# Web Container Build/Test
## Get Source
## Build/Test
## Docker Image Build
## Login AWS
## Push image to ECR

# API Container Build/Test
## Get Source
## Build/Test
## Docker Image Build
## Login AWS
## Push image to ECR

# Deploy
## Get Source
## Login AWS
## Edit Task Definition
## Deploy



